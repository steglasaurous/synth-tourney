@startuml Future state
    entity User {
        * id : int <<generated>>
    }

    entity UserAuth {
        * userAuthSourceId : int <<FK>>
        * userId : int <<FK>>
        * authInfo : json
    }

    entity UserAuthSource {
        * id : int <<generated>>
        * name : varchar
    }

    entity SynthMap {
        * id : int <<generated>>
        * title : varchar
        * artist : varchar
        * mapper : varchar
        * difficulty : varchar
        * totalNotes : int
        * totalSpecials : int
        * hash : varchar
    }

    entity Tournament {
        * id : int <<generated>>
        * state : enum<stopped|running|paused|done>
        * tournamentType : int <<FK>>
        * maxSongs : int
        * stopRecordingAfterMax : bool
    }

    entity UserHasTournament {
        * userId : int <<FK>>
        * tournamentId : int <<FK>>
        * isOwner : bool
    }

    entity TournamentType {
        * id : int <<generated>>
        * name : varchar
        * displayName : varchar
    }

    entity TournamentRound {
        * id : int <<generated>>
        * tournamentId : int <<FK>>
        * roundName : varchar
        * isActive : bool
    }

    entity PlayInstance {
        * id : int <<generated>>
        * synthMapId : int <<FK>>
        * roomName : string
        * timestamp : timestamp
        * tournamentId : int <<FK>>
    }

    entity ScoreSubmission {
        * id : int <<generated>>
        * userId : int <<FK>>
        * submitterPlayerName : varchar
        * submittedOn : timestamp
        * playInstanceId : int <<FK>>
    }

    entity Score {
        * id : int <<generated>>
        * scoreSubmissionId : int <<FK>>
        * playerName : varchar
        * score : int
        * totalNotes : int
        * totalNotesHit : int
        * perfectHits : int
        * goodHits : int
        * poorHits : int
        * longestStreak : int
        * maxMultiplier : int
        * specialsHit : int
        * specialsTotal : int
    }

    UserAuthSource }|-- UserAuth
    User }|-- UserAuth

    Score }|-- ScoreSubmission
    ScoreSubmission }|-- PlayInstance
    ScoreSubmission }|-- User
    PlayInstance }|-- SynthMap
    PlayInstance }|-- Tournament
    Tournament }|-- TournamentType
'    Tournament }|-- User
    Tournament }|-- UserHasTournament
    User }|-- UserHasTournament
    Tournament --|{ TournamentRound

@enduml

@startuml Initial MVP
    entity SynthMap {
        * id : int <<generated>>
        * map_id : varchar
        * title : varchar
        * artist : varchar
        * mapper : varchar
    }

    entity PlayInstance {
        * id : int <<generated>>
        * map_id : int <<FK>>
        * timestamp : timestamp
        room_id : string
    }

    note right of PlayInstance::room_id
        Unique multiplayer room id, if available
        so multiple submissions can be aggregated
    endnote

    entity ScoreSubmission {
        * id : int <<generated>>
        * submitter : varchar
        * submitted_on : timestamp
        * play_instance_id : int <<FK>>
    }

    entity Score {
        * id : int <<generated>>
        * score_submission_id : int <<FK>>
        * player_name : varchar
        * score : int
        * total_notes : int
        * total_notes_hit : int
        * perfect_hits : int
        * good_hits : int
        * poor_hits : int
        * longest_streak : int
        * max_multiplier : int
        * specials_hit : int
        * specials_total : int
    }

    Score }|-- ScoreSubmission
    ScoreSubmission }|-- PlayInstance
    PlayInstance }|-- SynthMap

@enduml